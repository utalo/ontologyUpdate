<project name="ARQ" xmlns:ivy="antlib:org.apache.ivy.ant" default="main" basedir=".">

  <property name="Name"            value="ARQ"/>
  <property name="name"            value="arq"/>
  <property environment="env"/>
  <!-- The major and minor version numbers  -->
  <property name="version-major"      value="2"/>
  <property name="version-minor"      value="5"/>
  <property name="version-revision"   value="0"/>
  <property name="version-status"     value=""/>
  <property name="version"
            value="${version-major}.${version-minor}.${version-revision}${version-status}"/>

  <property name="dist.name"       value="${Name}-${version}"/>

  <property name="src.dir"         value="src"/>
  <property name="src-test.dir"    value="src-test"/>
  <property name="src-ex.dir"      value="src-examples"/>
  <property name="src.build.dir"         value="bldsrc"/>
  <property name="classes.build.dir"     value="bldbin"/>
  <property name="dist.root"       value="dist"/>
  <property name="dist.dir"        value="${dist.root}/${dist.name}"/>
  <property name="lib.dir"         value="lib"/>
  <property name="grammar.dir"     value="Grammar"/>
  <property name="doc.dir"         value="doc"/>
  <property name="javadoc.dir"     value="doc/javadoc"/>
  <property name="javadoc.all.dir" value="doc/javadoc-all"/>

  <property name="test.dir"        value="testing"/>
  <property name="vocab.dir"       value="Vocabularies"/>

  <property name="jarfile"         value="${name}.jar"/>
  <property name="jarfile.extra"   value="${name}-extra.jar"/>

  <property name="arq.root"        value="src/com/hp/hpl/jena/query"/>

  <property name="reports.dir"       value="reports"/>
  <property name="reports.dir.xml"   value="reports/xml"/>
  <property name="reports.outdir"    value="reports"/>

  <!-- Define contents of each JAR file -->
  <property name="arq.path.impl"      value="com/hp/hpl/jena/sparql"/>
  <property name="extra.classes" 
	    value="${arq.path.impl}/**/test/** ${arq.path.impl}/**/junit/** arq/** ${arq.path.impl}/**/suites/**"/>

  <!-- =========================================================== -->
  <!-- ==== Environment -->
  
  <path id="classpath">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
  </path>

  <filterset id="filters.general">
    <filter token="name"           value="${Name}"/>
    <filter token="website"        value="http://jena.sourceforge.net/ARQ/"/>
    <filter token="version"        value="${version}"/>
    <filter token="version-major"  value="${version-major}"/>
    <filter token="version-minor"  value="${version-minor}"/>
    <filter token="version-status" value="${version-status}"/>   
  </filterset>   

  <target name="optimise-javac-flags"
          description="Set the javac flags that will produce an optmised jar with no debug symbols" >
    <property name="java.debug"       value="false"/>
    <property name="java.debuglevel"  value=""/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.source"      value="1.4"/>
    <property name="java.target"      value="1.4"/>
  </target>

  <target name="default-javac-flags"
          description="Set the javac flags that will produce an debug jar with no compiler optimisation and all debug symbols" >
    <!-- Note that in ant, if these flags are already set setting them again has no effect -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="false"/>
    <property name="java.source"      value="1.4"/>
    <property name="java.target"      value="1.4"/>
  </target>

  <target name="javac-flags" depends="default-javac-flags"/>

  <!-- =========================================================== -->
  <!-- ==== Main external targets -->

  <target name="init">
    <tstamp/>
  </target>

  <target name="main" depends="jar,junit" description="Build arq.jar"/>
  
  <target name="jar"  depends="make-jars" description="Build arq.jar">
    <antcall target="clean-build-dirs"/>
  </target>

  <target name="release" depends="init,package,junit"
          description="Create ARQ release">
    <antcall target="clean-build-dirs"/>
  </target>

  <!-- =========================================================== -->
  <!-- ==== Grammars, Compilation and JAR -->

  <target name="pre-compile" depends="clean-build-dirs,javac-flags">
  </target>

  <target name="build-src" depends="clean-build-dirs">
    <tstamp>
      <format property="BUILD_TIME"      pattern="yyyy-MM-dd HH:mm Z"/>
      <format property="BUILD_TIME_XSD"  pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
    </tstamp>
    
    <copy todir="${src.build.dir}">
      <fileset dir="${src.dir}" includes="**"/>
      <fileset dir="${src-test.dir}" includes="**"/>
      <fileset dir="${src-ex.dir}"  includes="**"/>
      <filterset>
        <filterset refid="filters.general"/>
        <filter token="build-time" value="${BUILD_TIME}" />
        <filter token="build-time-xsd" value="${BUILD_TIME_XSD}" />
      </filterset> 
    </copy>
  </target>

  <target name="compile" depends="pre-compile,build-src">
    <javac srcdir="${src.build.dir}"
           destdir="${classes.build.dir}"
           debug="${java.debug}"
           debuglevel="${java.debuglevel}"
           deprecation="${java.deprecation}"
           optimize="${java.optimize}"
           source="${java.source}"
           target="${java.target}">
      <src path="${src.build.dir}"/>
      <classpath refid="classpath" />
    </javac>
  </target>


<!-- Jena has a log4j in it so merely use that as the default.
  <target name="classes-misc">
    <copy todir="${classes.build.dir}" file="${src.dir}/log4j.properties"/>
  </target>
-->


  <target name="make-jars" depends="make-jar-core,make-jar-extra"/>

  <target name="make-jar-core" depends="compile">
    <!-- Core jar -->
    <jar destfile="${lib.dir}/${jarfile}" index="yes">
      <fileset dir="${classes.build.dir}" excludes="${extra.classes}"/>
    </jar>
  </target>
  
  <!-- Tests and examples jar -->
  <target name="make-jar-extra" depends="compile">
    <jar destfile="${lib.dir}/${jarfile.extra}" index="yes">
      <fileset dir="${classes.build.dir}" includes="${extra.classes}"/>
    </jar>
  </target>

  <!-- SSE subsystem - ->
  <target name="make-jar-sse" depends="compile">
    <jar destfile="${lib.dir}/${jarfile.sse}" index="yes">
        <fileset dir="${classes.build.dir}" includes="${sse.classes}"/>
      </jar>
  </target>
  -->

  <!-- =========================================================== -->
  <!-- ==== Testing -->
  <!-- <target name="test" depends="jar"> -->

  <target name="test" depends="junit"/>

  <target name="junit" depends="run-junit" description="Run the test suite using the ARQ jar files.">
    <fail message="Junit tests failed" if="junit.failed"/>
  </target>

  <target name="reports" depends="report"/>

  <target name="report" depends="run-report" description="Run tests and generate reports">
    <fail message="Junit tests failed" if="junit.failed"/>
  </target>

  <!-- run-junit and flag -->
  <target name="run-junit" depends="clean-reports">
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${reports.dir.xml}"/>
    <junit printsummary="yes" 
	   errorProperty="junit.failed"
	   failureProperty="junit.failed">
      <formatter type="xml"/>
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
      </classpath>
      <test todir="${reports.dir.xml}" name="com.hp.hpl.jena.sparql.test.ARQTestSuite"/>
    </junit>
  </target>

  <target name="run-report" depends="run-junit">
    <mkdir dir="${reports.outdir}"/>
    <junitreport todir="./${reports.dir}">
      <fileset dir="./${reports.dir.xml}">
        <include name="**.xml"/>
      </fileset>
      <report format="frames" todir="./${reports.outdir}"/>
    </junitreport>
  </target>

  <!-- =========================================================== -->
  <!-- ==== Javadoc -->

  <target name="javadoc" depends="clean-javadoc,build-src,javac-flags"
          description="Make the javadoc">
    <javadoc
     sourcepath="${src.build.dir}"
     source="${java.source}"
     destdir="${javadoc.dir}"
     author="true"
     version="true"
     classpathref="classpath"
     windowtitle="${Name} Query Processor"
     doctitle="${Name} Query Processor"
     Public="true"
     Use="true"
     bottom="Copyright &#169; 2004, 2005, 2006, 2007, 2008 Hewlett-Packard Development Company, LP"
     additionalparam="-breakiterator">
        <classpath refid="classpath"/>
        <package name="com.hp.hpl.jena.query"/>
        <package name="com.hp.hpl.jena.update"/>
        <package name="com.hp.hpl.jena.query.larq"/>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="clean-javadoc,build-src,javac-flags"
          description="Make the javadoc (all of it)">
    <javadoc
     packagenames="com.hp.hpl.jena.query.*,com.hp.hpl.jena.sparql.*,com.hp.hpl.jena.update.*"
     sourcepath="${src.build.dir}"
     source="${java.source}"
     destdir="${javadoc.all.dir}"
     author="true"
     version="true"
     classpathref="classpath"
     windowtitle="${Name} Query Processor"
     doctitle="${Name} Query Processor"
     Public="true"
     Use="true"
     bottom="Copyright &#169; 2004, 2005, 2006, 2007, 2008 Hewlett-Packard Development Company, LP"
     additionalparam="-breakiterator">
    </javadoc>
  </target>


  <!-- =========================================================== -->
  <!-- ==== Create distribution area -->

  <!-- Does not include javadoc-all which is large even when zipped -->
  <target name="package"
          depends="make-jars,javadoc,distribution-init,copy,zip"/>

  <target name="distribution-init">
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="copy" depends="distribution-init">
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}/${lib.dir}">
      <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </copy>

    <!-- Source : We could zip this up -->
    <copy todir="${dist.dir}/${src.dir}">
      <fileset dir="${src.build.dir}" includes="**"/>
    </copy>
    
    <!-- Examples source -->   
    <copy todir="${dist.dir}/${src-ex.dir}">
      <fileset dir="${src-ex.dir}" includes="**"/>
    </copy>

    <!-- Misc files -->
    <copy todir="${dist.dir}/" file="build.xml"/>
    <copy todir="${dist.dir}/" file="copyright.txt"/>
    <copy todir="${dist.dir}/" file="README.txt"/>
    <copy todir="${dist.dir}/" file="ChangeLog.txt"/>
    <copy todir="${dist.dir}/" file="test.sh"/>
    
    <!-- Vocabularies  -->
    <copy todir="${dist.dir}/${vocab.dir}">
      <fileset dir="${vocab.dir}" includes="**"/>
    </copy>
    
    <!-- Grammars -->
    <copy todir="${dist.dir}/${grammar.dir}">
      <fileset dir="${grammar.dir}">
        <!-- Just the minimum to produce a buildable grammar -->
        <include name="master.jj"/>
        <include name="sparql.jj"/>
        <include name="sparql-update.jj"/>
        <include name="arq.jj"/>
        <include name="grammar"/>
      </fileset>
    </copy>

    <!-- XML result set example
         Don't include.
         <copy todir="${dist.dir}/ResultSet">
         <fileset dir="ResultSet" includes="**"/>
         </copy>
    -->

    <!-- bin/ and bat/ -->
    <copy todir="${dist.dir}/bin">
      <fileset dir="bin" includes="**"/>
    </copy>
    <copy todir="${dist.dir}/bat">
      <fileset dir="bat" includes="**"/>
    </copy>
    <copy todir="${dist.dir}/etc">
      <fileset dir="etc" includes="**"/>
    </copy>
    
    
    <!-- Dependences
 -->

    <!-- lib directory includes jena.jar -->
    <copy todir="${lib.dir}">
      <fileset dir="lib" includes="*.jar"/>
    </copy>

    <!-- Documentation -->
    <!-- Javadoc is part of the documentation directory -->
    <copy todir="${dist.dir}/${doc.dir}">
      <fileset dir="${doc.dir}">
        <include name="**"/>
        <!-- Drafting area -->
        <exclude name="**/Drafts/**"/>
        <exclude name="**/index-css.html"/>
        <!-- FrontPage internal directories -->
        <exclude name="**/_vti*/**"/>
        <exclude name="**/_private/**"/>
        <exclude name="**/javadoc-all/**"/>
        <exclude name="**/desktop.ini"/>
      </fileset>
    </copy>

    <!-- Code examples -->
    <copy todir="${dist.dir}/${doc.dir}/${src-ex.dir}">
      <fileset dir="${src-ex.dir}"/>
      <mapper type="glob" from="*.java" to="*.java.txt"/>
    </copy>

    <!-- Ruby library -->
    <copy todir="${dist.dir}/Ruby">
      <fileset dir="Ruby"/>
    </copy>
    
    <!-- Lisp library -->
     <copy todir="${dist.dir}/Lisp">
       <fileset dir="Lisp"/>
     </copy>
  	
    <!-- Exclude any zips of the ARQ test scripts -->
    <copy todir="${dist.dir}/${test.dir}">
      <fileset dir="${test.dir}"
               includes="**"
               excludes="${test.dir}/*/*-tests-jena*.zip"/>
    </copy>
  </target>

  <target name="zip" >
    <!-- Build the zip of everything -->
    <delete file="${dist.root}/${dist.name}.zip"/>
    <zip zipfile="${dist.root}/${dist.name}.zip">
      <fileset dir="dist" includes="${dist.name}/**"/>
    </zip>
  </target>

  <!-- =========================================================== -->
  <!-- Cleaning -->
  <target name="clean" depends="clean-build-dirs"
          description="Clean up">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-all" depends="clean-javadoc,clean,clean-reports"
          description="Clean up a lot">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-build-dirs"
          depends="clean-build-classes-dir,clean-build-src-dir"/>
  <target name="clean-build-classes-dir">

    <delete dir="${classes.build.dir}"/>
    <mkdir dir="${classes.build.dir}"/>
  </target>

  <target name="clean-build-src-dir">
    <delete dir="${src.build.dir}"/>
    <mkdir  dir="${src.build.dir}"/>
  </target>

  <target name="clean-javadoc" description="Clean the javadoc directories">
    <delete dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
  </target>

  <target name="clean-reports">
    <delete dir="${reports.dir}"/>
    <delete dir="${reports.dir.xml}"/>
    <delete dir="${reports.outdir}"/>
  </target>

  <!-- SSE : Remove sometime because it's in the core compile now. -->
  
  <!--
  <property name="sse.src.dir" value="src-dev"/>

  <path id="sse.classpath">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${sse.jarfile}"/>
  </path>

  <target name="all-jars" depends="make-jars"/>

  <target name="sse-compile" depends="default-javac-flags">
    <antcall target="clean-build-dirs"/>
    <javac srcdir="${sse.src.dir}/"
           destdir="${classes.build.dir}"
           debug="${java.debug}"
           debuglevel="${java.debuglevel}"
           deprecation="${java.deprecation}"
           optimize="${java.optimize}"
           source="${java.source}"
           target="${java.target}">
      <include name="com/hp/hpl/jena/sparql/sse/**"/>
      <classpath refid="sse.classpath" />
    </javac>
  </target>
  -->

  <!-- Publishing with Ivy // Retrofit -->

  <!-- ========================================== -->
  <!-- ==== Ivy : Dependency Management  -->

  <property name="ivy.keyfile" 		location="${env.IVYKEY}"/>
  <property name="ivy.user"    		value="${env.IVYUSER}"/>
  <property name="pub.dir.local" 	location="tmp/pub"/>
  <property name="artifacts.dir" 	location="tmp/artifacts"/>
    
  <target name="artifacts">
    <!-- Crudely pick out of the distribution area -->
    <copy file="${dist.dir}/lib/${jarfile}" tofile="${artifacts.dir}/${name}-${version}.jar"/> 
    
    <!--
    <copy file="${dist.dir}/lib/${jarfile.extra}" tofile="${artifacts.dir}/${name}-extra-${version}.jar"/>
    -->
    
    <!-- Sources -->
    <!-- This is all the sources : needs tidying up
    <jar destfile="${artifacts.dir}/${name}-${version}-sources.jar">
      <fileset dir="${dist.dir}/src">
      	<include name="**/*.java"/>
      </fileset>
    </jar>
    -->
    
    <!-- Javadoc -->
    <jar destfile="${artifacts.dir}/${name}-${version}-javadoc.jar">
      <fileset dir="${dist.dir}/doc/javadoc">
      </fileset>
    </jar>
    
    <!-- pom.xml -->
    <copy file="pom-arq.xml" tofile="${artifacts.dir}/${name}-${version}.pom">
    	<filterset>
          <filter token="VERSION" value="${version}"/>
        </filterset>
    </copy>
  </target>
   
  <!-- Add release -->
  <target name="publish" depends="artifacts,ivy-publish-dev">
  </target>
    
  <target name="ivy-init">
    <ivy:settings />
  </target>

  <!-- DEVELOPMENT : lib2/ -->
  <target name="ivy-setup-lib" depends="ivy-init,ivy-resolve-report"> 
    <ivy:retrieve conf="dev" pattern="lib2/[artifact]-[revision](-[classifier]).[ext]" />
    <ivy:cachepath pathid="ivy.dev.classpath" conf="dev" />
  </target>

  <target name="ivy-resolve" depends="ivy-resolve-report"/>

  <target name="ivy-resolve-report" depends="ivy-init">
    <ivy:resolve conf="main"
		 haltonfailure="false" failureproperty="ivy.resolve.failed"/>
    <ivy:report todir="${reports.dir}"/>
    <fail message="Ivy dependency failed" if="ivy.resolve.failed"/>
  </target>

  <target name="ivy-publish" depends="ivy-init,ivy-resolve">
    <!-- <ivy:resolve conf="main"/> -->
    <ivy:deliver con="main"/>
    <ivy:publish conf="main" 
		 resolver="dev-publish" 
		 overwrite="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="publish-check">
    <fail message="Publication environment variables (IVYUSER, IVYKEY) not set">
      <condition>
	<and> 
	  <not><isset property="env.IVYUSER"/></not>
	  <not><isset property="env.IVYKEY"/></not>
	</and>
      </condition>
    </fail>
    <fail message="Publication environment variable (IVYUSER) not set"  unless="env.IVYUSER"/>
    <fail message="Publication environment variable (IVYKEY) not set"  unless="env.IVYKEY"/>
  </target>

  <!-- DEVELOPMENT -->
  <target name="ivy-publish-dev" depends="ivy-init,publish-check,ivy-resolve">
    <!-- <ivy:resolve conf="main"/> -->
    <ivy:publish conf="main" 
		 resolver="dev-resolver" 
		 overwrite="true"
		 forcedeliver="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="ivy-pom" depends="ivy-init">
    <!-- Make a basic POM file -->
    <ivy:makepom ivyfile="ivy.xml" 
		 pomfile="pom-arq-auto.xml">
      <!--
	<mapping conf="default" scope="compile"/>
	<mapping conf="runtime" scope="runtime"/>
      -->
    </ivy:makepom>
  </target>


</project>

//Tokens in BNF
// [] means will be inlined.
[<EOF>]          ::=
[<IRIref>]   ::= '<' ([^<>"{}|^`\]-[#x00-#x20])* '>'
<PNAME_NS>   ::= <PN_PREFIX>? ':'
<PNAME_LN>   ::= <PNAME_NS> <PN_LOCAL>
<BLANK_NODE_LABEL>  ::= '_:' <PN_LOCAL>
<VAR1>       ::= '?' <VARNAME>
<VAR2>       ::= '$' <VARNAME>
<LANGTAG>    ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*

<INTEGER>	::= [0-9]+
<DECIMAL>   ::= ( [0-9]+ '.' [0-9]* | '.' [0-9]+ )

// Required exponent
<DOUBLE> ::= [0-9]+ '.' [0-9]* <EXPONENT> | '.' ([0-9])+ <EXPONENT> | ([0-9])+ <EXPONENT>

<INTEGER_POSITIVE> ::= <PLUS> <INTEGER>
<DECIMAL_POSITIVE> ::= <PLUS> <DECIMAL>
<DOUBLE_POSITIVE> ::=  <PLUS> <DOUBLE>

<INTEGER_NEGATIVE> ::= <MINUS> <INTEGER>
<DECIMAL_NEGATIVE> ::= <MINUS> <DECIMAL>
<DOUBLE_NEGATIVE>  ::= <MINUS> <DOUBLE>

<#EXPONENT>  ::= [eE] [+-]? [0-9]+

<STRING_LITERAL1> ::= "'" ( ([^#x27#x5C#xA#xD]) | <ECHAR> )* "'"
<STRING_LITERAL2> ::= '"' ( ([^#x22#x5C#xA#xD]) | <ECHAR> )* '"'

<STRING_LITERAL_LONG1> ::= "'''" ( ( "'" | "''" )? ( [^'\] | <ECHAR> ) )* "'''"
<STRING_LITERAL_LONG2> ::= '"""' ( ( '"' | '""' )? ( [^"\] | <ECHAR> ) )* '"""'

<ECHAR>           ::= '\' [tbnrf\"']
//<HEX>             ::= [0-9] | [A-F] | [a-f]

// The print value is the whitespace trimmed value after ::=

[<KW_A>]       ::= 'a'

[<BASE>]       ::= 'BASE'
[<PREFIX>]     ::= 'PREFIX'
[<SELECT>]     ::= 'SELECT'
[<DESCRIBE>]   ::= 'DESCRIBE'
[<CONSTRUCT>]  ::= 'CONSTRUCT'
[<ASK>]        ::= 'ASK'
[<DISTINCT>]   ::= 'DISTINCT'
[<REDUCED>]    ::= 'REDUCED'
[<WHERE>]      ::= 'WHERE'

[<LIMIT>]      ::= 'LIMIT'
[<OFFSET>]     ::= 'OFFSET'
[<ORDER>]      ::= 'ORDER'
[<BY>]         ::= 'BY'

[<FROM>]       ::= 'FROM'
[<NAMED>]      ::= 'NAMED'

[<ASC>]        ::= 'ASC'
[<DESC>]       ::= 'DESC'

[<AS>]         ::= 'AS'
[<EXT>]        ::= 'EXT'
[<GROUP>]      ::= 'GROUP'
[<HAVING>]     ::= 'HAVING'
[<AGG>]        ::= 'AGG'
[<COUNT>]      ::= 'COUNT'
[<MIN>]        ::= 'MIN'
[<MAX>]        ::= 'MAX'
[<SUM>]        ::= 'SUM'
[<AVG>]        ::= 'AVG'
[<STDDEV>]     ::= 'STDEV'

[<FILTER>]     ::= 'FILTER'
[<REGEXP>]     ::= 'REGEXP'
[<GRAPH>]      ::= 'GRAPH'
[<UNION>]      ::= 'UNION'
[<OPTIONAL>]   ::= 'OPTIONAL'
[<BOUND>]      ::= 'BOUND'
[<STR>]        ::= 'STR'
[<URI>]        ::= 'URI'
[<DTYPE>]      ::= 'DATATYPE'
[<LANG>]       ::= 'LANG'
[<LANGMATCHES>] ::= 'LANGMATCHES'

//[<IS_IRI>]     ::= ('isURI'|'isIRI')
[<IS_IRI>]     ::= 'isIRI'
[<IS_URI>]     ::= 'isURI'
[<IS_BLANK>]   ::= 'isBLANK'
[<IS_LITERAL>] ::= 'isLITERAL'
[<SAME_TERM>]  ::= 'sameTerm'
[<REGEX>]      ::= 'REGEX'
[<TRUE>]       ::= 'true'
[<FALSE>]      ::= 'false'

[<MODIFY>]      ::= 'MODIFY'
[<INSERT>]      ::= 'INSERT'
[<DELETE>]      ::= 'DELETE'
[<DATA>]        ::= 'DATA'
[<LOAD>]        ::= 'LOAD' 
[<CLEAR>]       ::= 'CLEAR' 
[<CREATE>]      ::= 'CREATE' 
[<SILENT>]      ::= 'SILENT' 
[<DROP>]        ::= 'DROP' 
[<INTO>]        ::= 'INTO' 
[<BEGIN>]       ::= 'BEGIN'
[<COMMIT>]      ::= 'COMMIT'
[<ABORT>]       ::= 'ABORT'

// Tokens introduced by OUL
[<FEEDBACK>]	::= 'FEEDBACK'
[<LOOP>]		::= 'LOOP'
[<APPLYREQUEST>]::= 'APPLYREQUEST'
[<FOR>]			::= 'FOR'
[<END>]			::= 'END'

//[<NIL>]        ::= '(' ')'
<NIL>          ::= '(' <WS>* ')'
<WS>           ::= #x20 | #x9 | #xD | #xA

[<LPAREN>]     ::= '('
[<RPAREN>]     ::= ')'

[<LBRACE>]     ::= '{'
[<RBRACE>]     ::= '}'

[<LBRACKET>]   ::= '['
[<RBRACKET>]   ::= ']'

//[<ANON>]       ::= '[' ']'
<ANON>       ::= '['  <WS>* ']'

[<SEMICOLON>]  ::= ';'
[<COMMA>]      ::= ','
[<DOT>]        ::= '.'
[<GT>]         ::= '>'
[<LT>]         ::= '<'
[<BANG>]       ::= '!'
[<HOOK>]       ::= '?'
[<COLON>]      ::= ':'
[<EQ>]         ::= '='
[<NE>]         ::= '!='
[<LE>]         ::= '<='
[<GE>]         ::= '>='
[<SC_OR>]      ::= '||'
[<SC_AND>]     ::= '&&'
[<INCR>]       ::= '++'
[<DECR>]       ::= '--'
[<PLUS>]       ::= '+'
[<MINUS>]      ::= '-'
[<STAR>]       ::= '*'
[<SLASH>]      ::= '/'
[<DATATYPE>]   ::= '^^'
//[<AT>]         ::= '@'
[ASSIGN]        ::= ':='
[VBAR]          ::= '|'
[CARROT]        ::= '^'
[FPATH]         ::= '->'
[RPATH]         ::= '<-'
[QMARK]         ::= '?'

<#PN_CHARS_BASE>     ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]

<#PN_CHARS_U>      ::= <PN_CHARS_BASE> | '_'


<#VARNAME>      ::=  ( <PN_CHARS_U>  | [0-9] ) ( <PN_CHARS_U> | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040] )*

<#PN_CHARS>      ::=  <PN_CHARS_U> | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]

<#PN_PREFIX> ::= <PN_CHARS_BASE> ((<PN_CHARS>|'.')* <PN_CHARS>)?

<#PN_LOCAL>       ::= ( <PN_CHARS_U> | [0-9] ) ((<PN_CHARS>|'.')* <PN_CHARS>)?

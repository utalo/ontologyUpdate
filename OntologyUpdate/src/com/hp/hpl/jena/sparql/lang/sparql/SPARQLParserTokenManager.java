/* Generated By:JavaCC: Do not edit this line. SPARQLParserTokenManager.java */
/*
 * (c) Copyright 2004, 2005, 2006, 2007, 2008 Hewlett-Packard Development Company, LP
 * All rights reserved.
 */

package com.hp.hpl.jena.sparql.lang.sparql ;







/** Token Manager. */
public class SPARQLParserTokenManager implements SPARQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 40:
         jjmatchedKind = 84;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 85;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 108;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 106;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 93;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 107;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 94;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 109;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 103;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 92;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 64:
         jjmatchedKind = 111;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x40000842000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10020040000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2000000001000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40080a00000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1200000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x130008200000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8001e00000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80180004000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2018000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000000400000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xc04020000100000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000004000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 91:
         jjmatchedKind = 89;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 90;
         return jjMoveNfa_0(0, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 97:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000842000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10020040000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000001000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40080a00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1200000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x130008200000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8001e00000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80180004000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2018000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000400000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc04020000100000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000004000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 123:
         jjmatchedKind = 87;
         return jjMoveNfa_0(0, 0);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 125:
         jjmatchedKind = 88;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 102;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x141c0100040000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x822000080d00000L, active1, 0L);
      case 70:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000400000000L, active1, 0x1L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004200000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x5200004800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x180010001000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x40002000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001210080000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e00042000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 94:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x141c0100040000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x822000080d00000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000400000000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5200004800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x180010001000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40002000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001210080000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e00042000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10400000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000400080000L, active1, 0x1L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000404000000000L, active1, 0L);
      case 75:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x11008000100000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000104000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x400180001000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000200000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80a40000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000042000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8210000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         break;
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10400000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000400080000L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000404000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x11008000100000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000104000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400180001000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80a40000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000042000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8210000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800040000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x6000110100000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 71:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002004000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000010000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 80:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x600400000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000009000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000200000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800040000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x6000110100000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002004000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000010000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x600400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000009000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x400800000000000L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000L);
      case 68:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 72:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000280000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 78:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 82:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 84:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x5040001000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L);
      case 88:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400800000000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000280000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x5040001000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L);
      case 120:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x20100000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L);
      case 69:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2005000000400000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x802000200000L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000001000000L);
      case 84:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L);
      case 88:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20100000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2005000000400000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x802000200000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000001000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L);
      case 120:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000200000L);
      case 68:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 75:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x400100000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000200000L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 107:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x400100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2001000000000000L);
      case 67:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1000100001000000L);
      case 69:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L);
      case 75:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
         }
         break;
      case 81:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 7;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2001000000000000L);
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1000100001000000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L);
      case 107:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
         }
         break;
      case 113:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000100000000000L);
      case 76:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 84:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 8;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000100000000000L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 8;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x40100000000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x40100000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L);
      case 71:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L);
      case 84:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 11;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L);
      case 82:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 12;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
         }
         break;
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 153;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(102, 103);
                  else if (curChar == 58)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(82);
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 35)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(20, 22);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  else if (curChar == 39)
                     jjCheckNAddStates(26, 28);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(20, 22);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 62 && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff200000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 13:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(24);
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 27:
                  if (curChar == 39)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 30:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 31:
                  if (curChar == 39 && kind > 80)
                     kind = 80;
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 35:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 36:
                  if (curChar == 34 && kind > 81)
                     kind = 81;
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(29, 32);
                  break;
               case 38:
               case 43:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 42:
                  if (curChar == 39)
                     jjAddStates(33, 34);
                  break;
               case 44:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 45:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 47:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(35, 38);
                  break;
               case 49:
               case 54:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 52:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 53:
                  if (curChar == 34)
                     jjAddStates(39, 40);
                  break;
               case 55:
                  if (curChar == 34 && kind > 83)
                     kind = 83;
                  break;
               case 56:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 58:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 40)
                     jjCheckNAddStates(17, 19);
                  break;
               case 60:
                  if (curChar == 35)
                     jjCheckNAddStates(41, 46);
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(41, 46);
                  break;
               case 62:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 63:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 64:
                  if (curChar == 41 && kind > 86)
                     kind = 86;
                  break;
               case 65:
                  if (curChar == 10)
                     jjCheckNAddStates(17, 19);
                  break;
               case 66:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 35)
                     jjCheckNAddStates(47, 52);
                  break;
               case 69:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(47, 52);
                  break;
               case 70:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 71:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 73:
                  if (curChar == 10)
                     jjCheckNAddStates(53, 55);
                  break;
               case 74:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 77:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if (curChar == 58 && kind > 9)
                     kind = 9;
                  break;
               case 79:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 80:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if (curChar == 58)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 84:
                  if ((0x3ff200000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 85:
                  if (curChar != 58)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(82);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 6);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar != 46)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 95:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(96);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(100);
                  break;
               case 101:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAdd(108);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(109, 110);
                  break;
               case 110:
                  if (curChar != 46)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(111);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(111);
                  break;
               case 112:
                  if (curChar == 46)
                     jjCheckNAdd(113);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(113);
                  break;
               case 114:
                  if (curChar == 46)
                     jjCheckNAdd(115);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 117:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(118);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(120, 121);
                  break;
               case 121:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 124:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 128:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(129);
                  break;
               case 130:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(131);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 133:
                  if (curChar != 46)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(134);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(134);
                  break;
               case 135:
                  if (curChar == 46)
                     jjCheckNAdd(136);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(136);
                  break;
               case 137:
                  if (curChar == 46)
                     jjCheckNAdd(138);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 140:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(141);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(141);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 67);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 144:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 147:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(148);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(149, 150);
                  break;
               case 151:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(152);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(53, 55);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 64)
                     jjCheckNAdd(20);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(68, 73);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  jjAddStates(20, 22);
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(15);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 64)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 50:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 51:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 61:
                  jjAddStates(41, 46);
                  break;
               case 67:
                  if (curChar == 91)
                     jjCheckNAddStates(53, 55);
                  break;
               case 69:
                  jjCheckNAddStates(47, 52);
                  break;
               case 72:
                  if (curChar == 93 && kind > 91)
                     kind = 91;
                  break;
               case 75:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(68, 73);
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(81);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 116:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 123:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 127:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 150:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(24);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(68, 73);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjAddStates(20, 22);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(74, 75);
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(18);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(18);
                  break;
               case 23:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(24);
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(26, 28);
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(23, 25);
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(29, 32);
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 38);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 46);
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 52);
                  break;
               case 75:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(68, 73);
                  break;
               case 76:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(78);
                  break;
               case 79:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(81);
                  break;
               case 82:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 84:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 153 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   87, 88, 89, 91, 92, 97, 98, 131, 132, 135, 137, 142, 108, 109, 112, 114, 
   119, 60, 63, 64, 1, 2, 4, 33, 34, 36, 28, 29, 31, 38, 39, 40, 
   42, 43, 45, 49, 50, 51, 53, 54, 56, 60, 61, 62, 66, 63, 64, 68, 
   69, 70, 74, 71, 72, 68, 71, 72, 76, 77, 79, 80, 120, 121, 126, 127, 
   143, 144, 149, 150, 76, 77, 78, 79, 80, 81, 6, 7, 95, 96, 99, 100, 
   105, 106, 117, 118, 124, 125, 128, 129, 140, 141, 147, 148, 151, 152, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\141", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\50", "\51", null, "\173", "\175", "\133", "\135", null, "\73", "\54", "\56", 
"\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41", "\176", "\72", "\174\174", 
"\46\46", "\53", "\55", "\52", "\57", "\136\136", "\100", null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffe7f01L, 0xffffffff8ffbL, 
};
static final long[] jjtoSkip = {
   0xbeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[153];
private final int[] jjstateSet = new int[306];
protected char curChar;
/** Constructor. */
public SPARQLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SPARQLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 153; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
